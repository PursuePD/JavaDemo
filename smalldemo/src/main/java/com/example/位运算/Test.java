package com.example.位运算;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author:  小崔
 * @create: 2019-11-26 11:52
 * @Description:
 */

public class Test {
    private static final Logger log = LoggerFactory.getLogger(Test.class);

    public static void main(String[] args) {
	/**
	 * 1、补码
	 *    在总结按位运算前，有必要先介绍下补码的知识，我们知道当将一个十进制正整数转换为二进制数的时候，只需要通过除2取余的方法即可，
	 *    但是怎么将一个十进制的负整数转换为二进制数呢？其实，负数是以补码的形式表示，其转换方式，简单的一句话就是：先按正数转换，然后取反加1。
	 *
	 * 要将十进制的-10用二进制表示，先将10用二进制表示：
	 * 0000 0000 0000 1010
	 * 取反：
	 * 1111 1111 1111 0101
	 * 加1：
	 * 1111 1111 1111 0110
	 * 所以，-10的二进制表示就是：1111 1111 1111 0110
	 *
	 *  2、按位与(&)
	 *	参加运算的两个数，换算为二进制(0、1)后，进行与运算。只有当相应位上的数都是1时，该位才取1，否则该为为0。
	 *将10与-10进行按位与(&)运算：
	 * 0000 0000 0000 1010
	 * 1111 1111 1111 0110
	 * -----------------------
	 * 0000 0000 0000 0010
	 * 所以：10 & -10 = 0000 0000 0000 0010
	 *
	 * 3、按位或(|)
	 * 	参加运算的两个数，换算为二进制(0、1)后，进行或运算。只要相应位上存在1，那么该位就取1，均不为1，即为0。
	 * 将10与-10进行按位或(|)运算：
	 * 0000 0000 0000 1010
	 * 1111 1111 1111 0110
	 * -----------------------
	 * 1111 1111 1111 1110
	 * 所以：10 | -10 = 1111 1111 1111 1110
	 *
	 * 4、按位异或(^)
	 *	参加运算的两个数，换算为二进制(0、1)后，进行异或运算。只有当相应位上的数字不相同时，该为才取1，若相同，即为0。
	 *将10与-10进行按位异或(^)运算：
	 * 0000 0000 0000 1010
	 * 1111 1111 1111 0110
	 * -----------------------
	 * 1111 1111 1111 1100
	 * 所以：10 ^ -10 = 1111 1111 1111 1100
	 *
	 * 5、取反(~)
	 * 	参加运算的两个数，换算为二进制(0、1)后，进行取反运算。每个位上都取相反值，1变成0，0变成1。
	 * 对10进行取反(~)运算：
	 * 0000 0000 0000 1010
	 * ---------------------
	 * 1111 1111 1111 0101
	 * 所以：~10 = 1111 1111 1111 0101
	 *
	 * 6、左移(<<)
	 *	参加运算的两个数，换算为二进制(0、1)后，进行左移运算，用来将一个数各二进制位全部向左移动若干位。
	 *对10左移2位(就相当于在右边加2个0)：
	 * 0000 0000 0000 1010
	 * --------------------
	 * 0000 0000 0010 1000
	 * 所以：10 << 2 = 0000 0000 0010 1000 = 40
	 * 注意，观察可以发现，左移一位的结果就是原值乘2，左移两位的结果就是原值乘4。
	 *
	 * 7、右移(>>)
	 * 	参加运算的两个数，换算为二进制(0、1)后，进行右移运算，用来将一个数各二进制位全部向右移动若干位。
	 * 	表示该值是负数的移位,在移位过程中,高位补1,若符号位是0,表示是正数,在移位过程中高位补零
	 *对10右移2位(就相当于在左边加2个0)：
	 * 0000 0000 0000 1010
	 * --------------------
	 * 0000 0000 0000 0010
	 * 所以：10 >> 2 = 0000 0000 0000 0010 = 2
	 *注意，观察可以发现，右移一位的结果就是原值除2，左移两位的结果就是原值除4，注意哦，除了以后没有小数位的，都是取整。
	 *
	 * 8、无符号右移(>>>) 负数的无符号右移就是相应的补码移位所得，在高位补0即可。
	 * -4>>>1
	 * 11111111111111111111111111111100
	 * 11111111111111111111111111111110
	 */
	log.info("4二进制:{}",Integer.toBinaryString(4));
	log.info("4>>1:二进制{}",Integer.toBinaryString(4>>1));
	log.info("4>>>1:二进制{}",Integer.toBinaryString(4>>>1));
	log.info("-4>>2:二进制{},十进制{}",Integer.toBinaryString(-4>>2),(-4>>2));
	log.info("-4>>>2:二进制{},十进制{}",Integer.toBinaryString(-4>>>2),(-4>>>2));
	log.info("4>>>2:二进制{},十进制{}",Integer.toBinaryString(4>>>2),(4>>>2));



	log.info("-4二进制(32):{}",Integer.toBinaryString(-4));
	log.info("11111111111111111111111111111100十进制:{}",Integer.parseInt("11111111111111111111111111111100",2));
	log.info("4二进制(32):{}",Integer.toBinaryString(4));
	log.info("-4转为4:{}",Integer.toBinaryString(~(-4)+1));
	log.info("4>>1:{}",-4>>1);



	log.info("(h = key.hashCode()) ^ (h >>> 16) -> {}",(75307617 ^ (1149)));


    }
}
